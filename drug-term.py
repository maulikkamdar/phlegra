import os
import sys
import re
from copy import deepcopy

# This script matches the names of the drugs in the network created by drug-network.py to the names of the drugs in the FAERS file, generated by parseFAERS.py
# This step is non-trivial, as the default files available for download on the FAERS website do not provide unique drug IDs using any terminology
# It takes as input a 2-column DrugID, Drug_Name file from the network
# Input: Network_Drugs (generated from drug-network.py), FAERS_drugs (generated from parseFAERS.py)
# Output: 3 matched files with different degrees of matching strength, one file with names of unmatched drugs
# python drug-term.py NETWORK_DRUGS_file FAERS_DRUG_file OUTPUT_file_prefix
# python drug-term.py drug-names.tsv faers-drugs.tsv mappings/drug
# @TODO use argparse instead of sys
# @TODO combine this file with the reaction-term.py reaction mapper file
# @TODO currently the drug-network.py is a labyrinth and needs to be cleaned up - To directly generate the drug-names.tsv from the generated network, use NetworkX graph traversal functions.


drug_name_mapper = {}

def process_name(name):
	updated_name = name.split("@")[0][1:-1]
	if " (" in updated_name:
		updated_name = updated_name.split(" (")[0]
	return updated_name.lower()

def get_faers_mapper(drug):
	drug_name = re.sub('[^a-zA-Z]+', " ", drug)
	drug_name = ' '.join(drug_name.split())
	ldfaers = None
	ess_chars = []
	if drug_name.lower() in drug_name_mapper:
		ldfaers = drug_name_mapper[drug_name.lower()]
		ess_chars.append(drug_name.lower())
	else: # do longest match
		drug_parts = drug_name.split()
		for k in reversed(range(1, len(drug_parts))):
			for m in range(len(drug_parts)):
				try_name = " ".join(drug_parts[m:m+k])
				#print try_name
				if try_name.lower() in drug_name_mapper:
					ldfaers = drug_name_mapper[try_name.lower()]
					ess_chars = [try_name.lower()]
					break
			if ldfaers:
				break
	if not ldfaers:
		ess_chars.extend([name.lower() for name in drug_name.split()])
	return (ldfaers, ess_chars)

def main():
	drug_names_file = open(sys.argv[1])
	drug_names_lines = drug_names_file.readlines()
	drug_names_file.close()

	drug_faers_file = open(sys.argv[2])
	drug_faers_lines = drug_faers_file.readlines()
	drug_faers_file.close()

	prefix = sys.argv[3]
	match_1_file = open(prefix + "_match_1.tsv", "w+")
	match_2_file = open(prefix + "_match_2.tsv", "w+")
	match_3_file = open(prefix + "_match_3.tsv", "w+")
	unmatched_file = open(prefix + "_unmatched.tsv", "w+")

	drug_ids = {}
	unmatched_ids = {}

	for k in range(len(drug_names_lines)):
		drug_name_parts = drug_names_lines[k].strip().split("\t")
		names = drug_name_parts[1].split(";")
		updated_names = []
		for name in names:
			updated_name = process_name(name)
			updated_names.append(updated_name)
			drug_name_mapper[updated_name] = drug_name_parts[0]
		drug_ids[drug_name_parts[0]] = updated_names

	for k in range(len(drug_faers_lines)):
		drug_faers = drug_faers_lines[k].strip()
		#print drug_faers
		if "(" in drug_faers:
			faer_parts = drug_faers.split("(")
			drug_1 = faer_parts[0]
			(ldfaers1, ess_chars1) = get_faers_mapper(drug_1)
			if ")" in faer_parts[1]:
				drug_2 = faer_parts[1].split(")")[0]
				(ldfaers2, ess_chars2) = get_faers_mapper(drug_2)
			if ldfaers1 and ldfaers2:
				identifer = ";".join(ess_chars1) + ";" + ";".join(ess_chars2)
				if ldfaers1 == ldfaers2:
					match_1_file.write("%s\t%s\t%s\t%s\n" % (k, drug_faers, ldfaers1, identifer))
				else:
					match_2_file.write("%s\t%s\t%s\t%s\t%s\n" % (k, drug_faers, ldfaers1, ldfaers2, identifer))
			elif ldfaers1:
				match_1_file.write("%s\t%s\t%s\t%s\n" % (k, drug_faers, ldfaers1, ";".join(ess_chars1)))
			elif ldfaers2:
				match_1_file.write("%s\t%s\t%s\t%s\n" % (k, drug_faers, ldfaers2, ";".join(ess_chars2)))
			else:
				if ess_chars2:
					ess_chars1.extend(ess_chars2)
				unmatched_ids[k] = {"drug": drug_faers, "parts": ess_chars1}
		else:
			(ldfaers, ess_chars) = get_faers_mapper(drug_faers)
			if ldfaers:
				match_1_file.write("%s\t%s\t%s\t%s\n" % (k, drug_faers, ldfaers, ";".join(ess_chars)))
			else:
				unmatched_ids[k] = {"drug": drug_faers, "parts": ess_chars}

	match_1_file.close()
	match_2_file.close()
	print "now to generate weak links"

	iterator = deepcopy(unmatched_ids)
	for k in iterator:
		completed = False
		#print unmatched_ids[k]["drug"]
		for name in drug_name_mapper:
			for m in unmatched_ids[k]["parts"]:
				if name in m or m in name:
					match_3_file.write("%s\t%s\t%s\t%s\n" % (k, unmatched_ids[k]["drug"], drug_name_mapper[name], ";".join(unmatched_ids[k]["parts"])))
					completed = True
					break
			if completed:
				unmatched_ids.pop(k)
				break

	match_3_file.close()

	for k in unmatched_ids:
		unmatched_file.write("%s\t%s\t%s\n" % (k, unmatched_ids[k]["drug"], ";".join(unmatched_ids[k]["parts"])))
	unmatched_file.close()

if __name__ == "__main__":
	main()



